pipeline {
	agent { label "${params.AgentLabel}" }
	
	environment {
		GIT_URL = credentials('dsp56300_gitUrl')
		BUILD_JUCE = needsJuce()
		BUILD_FX_PLUGIN = buildFxPlugins()
		CMAKE_BUILD_DIR = 'temp/cmake_jenkins'
	}
	parameters
	{
		string(name: 'Branch', defaultValue: "master", description: '')
		string(name: 'AgentLabel', defaultValue: "git && cmake", description: '')
		booleanParam(name: 'FXPlugins', defaultValue: false, description: '') 
		booleanParam(name: 'Deploy', defaultValue: true, description: '') 
		booleanParam(name: 'IntegrationTests', defaultValue: true, description: '')
		booleanParam(name: 'Upload', defaultValue: false, description: '') 
		string(name: 'UploadFolder', defaultValue: "", description: '')
	}
	stages {
		stage("Checkout") {
			steps {
				script {
					currentBuild.displayName += " - ${params.AgentLabel} - ${params.Branch}"
					currentBuild.description = "Integration Tests: ${params.IntegrationTests}\nDeploy: ${params.Deploy}\nUpload: ${params.Upload}"
				}
				doCheckout()
			}
		}
		stage('Compile') {
			steps {
				cmakeBuild();
			}
		}
		stage('Pack') {
			steps {
				doPack();
			}
		}
		stage('Integration Tests') {
			when {
				expression {
					return params.IntegrationTests
				}
			}
			steps {
				doIntegrationTests();
			}
		}
		stage('Deploy') {
			when {
				expression {
					return params.Deploy
				}
			}
			steps {
				doDeploy();
			}
		}
		stage('Upload') {
			when {
				expression {
					return params.Upload
				}
			}
			steps {
				doUpload();
			}
		}
	}
}

def genericSh(cmd)
{
	if (isUnix())
	{
		sh cmd
	}
	else
	{
		bat cmd
	}
}

def hasLabel(String label)
{
    def res = false
    
    env.NODE_LABELS.split(' ').each
    { l ->
        if (l.equals(label))
        {
            res = true
        }
    }

    return res
}

def formatArg(_arg)
{
	if(isUnix())
		return '$' + _arg
	else
		return '%' + _arg + '%'
}

def deleteFile(name)
{
	if(isUnix())
		sh "rm -f ${name}"
	else
		bat "del ${name}"
}

def needsJuce()
{
    //return params.Deploy || params.Upload ? 'ON' : 'OFF'
	return true
}
def buildFxPlugins()
{
	return params.FXPlugins ? 'ON' : 'OFF'
}
def cmakeBuildDir()
{
	return "${CMAKE_BUILD_DIR}_${params.Branch}"
}

def doCheckout()
{
	checkout(
		[$class: 'GitSCM'
		, branches: [[name: "*/${params.Branch}"]]
		, extensions: [
			[$class: 'SubmoduleOption'
			, disableSubmodules: false
			, parentCredentials: false
			, recursiveSubmodules: true
			, reference: ''
			, trackingSubmodules: false]]
			, userRemoteConfigs: [[ url: GIT_URL ]]
		]
	)
}

def cmakeBuild()
{
	def buildDir = cmakeBuildDir();

	withCredentials([file(credentialsId: 'rclone_dsp56300_conf', variable: 'RCLONE_CONF')]) {
	    if(hasLabel("mac")) {
        	genericSh "cmake . -G Xcode -B ${buildDir} -Dgearmulator_BUILD_JUCEPLUGIN=${BUILD_JUCE} -Dgearmulator_BUILD_FX_PLUGIN=${BUILD_FX_PLUGIN} -DCMAKE_BUILD_TYPE=Release"
	    } else {
        	genericSh "cmake . -B ${buildDir} -Dgearmulator_BUILD_JUCEPLUGIN=${BUILD_JUCE} -Dgearmulator_BUILD_FX_PLUGIN=${BUILD_FX_PLUGIN} -DCMAKE_BUILD_TYPE=Release"
	    }

    	dir(cmakeBuildDir()) {
    	    if(hasLabel("m2")) {
        		genericSh 'cmake --build . --config Release --parallel 6'
    	    } else if(hasLabel("pi5")) {
        		genericSh 'cmake --build . --config Release --parallel 2'
    		} else {
    		    genericSh 'cmake --build . --config Release --parallel 2'
    		}
    	}
	}
}

def doIntegrationTests()
{
	withCredentials([file(credentialsId: 'rclone_dsp56300_conf', variable: 'RCLONE_CONF')]) {
    	dir(cmakeBuildDir()) {
    		genericSh "ctest -C Release -VV --output-on-failure"
    	}
	}
}

def doPack()
{
	dir(cmakeBuildDir()) {
		genericSh 'cmake -P ../../scripts/pack.cmake'
	}
}

def copyArtefacts(local, remote)
{
	withCredentials([file(credentialsId: 'rclone_dsp56300_conf', variable: 'RCLONE_CONF')]) {
		dir(cmakeBuildDir()) {
			genericSh "cmake -DUPLOAD_LOCAL=${local} -DUPLOAD_REMOTE=${remote} -DFOLDER=${params.Branch}/${params.UploadFolder} -P ../../scripts/deploy.cmake"
		}
	}
}

def doDeploy()
{
	copyArtefacts(1,0)
}

def doUpload()
{
	copyArtefacts(0,1)
}
